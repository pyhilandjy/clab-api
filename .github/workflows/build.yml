name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BRANCH_NAME: ${{ github.ref_name }}
  TAG_NAME: ${{ github.ref_name }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1. 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. GitHub Container Registry 로그인
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. 커밋 해시 가져오기
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # 4. 커밋 해시 출력
      - name: Check outputs
        run: echo ${{ steps.vars.outputs.sha_short }}

      # 5. Docker 이미지 버전 태그 설정
      - name: Set version
        id: version
        run: echo "version_tag=${{ env.BRANCH_NAME }}-${{ steps.vars.outputs.sha_short }}" >> $GITHUB_OUTPUT

      # 6. Docker 메타데이터 설정
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}-${{ steps.vars.outputs.sha_short }}
          labels: ${{ steps.meta.outputs.labels }}
          env: ENV=${{ env.BRANCH_NAME == 'dev' && 'dev' || 'prod' }} VERSION=${{ steps.meta.outputs.tags }}-${{ steps.vars.outputs.sha_short }}

      # 8. GitHub Actions의 IP를 EC2 보안 그룹에 추가 (SSH 인바운드 규칙)
      - name: Add SSH inbound rule to EC2 security group
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id sg-00238cd34b57d6565 \
            --protocol tcp \
            --port 22 \
            --cidr $(curl -s https://checkip.amazonaws.com)/32
        # GitHub Actions IP를 보안 그룹에 추가하여 SSH 접근 허용

      # 9. EC2로 배포 작업 수행
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ubuntu
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > SSH_PRIVATE_KEY.pem
          chmod 600 SSH_PRIVATE_KEY.pem
          ssh -i SSH_PRIVATE_KEY.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # Docker Compose 배포 작업
            cd clab
            docker compose down
            docker compose pull
            docker compose up -d
          EOF

      # 10. SSH 인바운드 규칙 제거 (보안 그룹에서 SSH 접근 차단)
      - name: Remove SSH inbound rule from EC2 security group
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id sg-00238cd34b57d6565 \
            --protocol tcp \
            --port 22 \
            --cidr $(curl -s https://checkip.amazonaws.com)/32
